{"version":3,"sources":["components/Card/Card.tsx","components/Cardlist/Cardlist.tsx","components/SearchBox/SearchBox.tsx","components/Scroll/Scroll.tsx","components/ErrorBoundary/ErrorBoundary.tsx","components/Header/Header.tsx","components/MainPage/MainPage.tsx","containers/App.tsx","actions/actions.tsx","constants/constants.js","serviceWorker.js","reducers/reducers.tsx","index.tsx"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Header","MainPage","filterRobots","searchField","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eb59b05b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IRobot } from '../../interfaces';\r\n\r\nconst Card: React.SFC<IRobot> = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport { IRobot } from '../../interfaces';\r\n\r\nconst CardList = ({ robots }: {robots: Array<IRobot>}) => {\r\n    return (\r\n        <div>\r\n            {robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={robots[i].id} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport { ISearchBoxProps } from '../../interfaces';\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { ScrollProps } from '../../interfaces';\r\n\r\nconst Scroll = (props: ScrollProps) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { IStateErrorBoundary } from '../../interfaces';\r\n\r\nclass ErrorBoundary extends Component<{}, IStateErrorBoundary> {\r\n    constructor(props: never) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    };\r\n\r\n    componentDidCatch(error: Error | null, info: object) {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    };\r\n};\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    // Prevents the title from being re-rendered when any changes happen\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return <h1 className='f1'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardList from '../Cardlist/Cardlist';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\nimport Scroll from '../Scroll/Scroll';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\nimport Header from '../Header/Header';\r\nimport './MainPage.css';\r\nimport { Props, IRobot } from '../../interfaces';\r\n\r\nclass MainPage extends Component<Props, {}> {\r\n    componentDidMount(): void {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    filterRobots = () : Array<IRobot> => {\r\n        const { robots, searchField } = this.props;\r\n        \r\n        return robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const { onSearchChange, isPending } = this.props\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    { isPending ? <h1>Loading...</h1> :\r\n                        <ErrorBoundary>\r\n                            <CardList robots={this.filterRobots()} />\r\n                        </ErrorBoundary>\r\n                    }\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport MainPage from '../components/MainPage/MainPage';\r\nimport { setSearchField, requestRobots } from '../actions/actions';\r\nimport { connect } from 'react-redux';\r\nimport { AnyAction } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { IStateProps, IStateRobots, IStateSearch, Props } from '../interfaces';\r\n\r\nconst mapStateToProps = (state: {searchRobots: IStateSearch, requestRobots: IStateRobots}) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<IStateProps, Error, AnyAction>) => {\r\n    return {\r\n        onSearchChange: (event: React.ChangeEvent<HTMLInputElement>)  => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component<IStateProps> {\r\n    render(): JSX.Element {\r\n       return <MainPage {...this.props as Props}/>\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from '../constants/constants';\r\n\r\nexport const setSearchField = (text: string) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots: (() => (dispath: any) => void) = () => (dispatch: any) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from '../constants/constants';\r\nimport { IStateRobots, IStateSearch} from '../interfaces';\r\n\r\nconst initialStateSearch: IStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state: IStateSearch = initialStateSearch, action: any = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots: IStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state: IStateRobots = initialStateRobots, action: any = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')  as HTMLElement\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}